/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LogoParser.jj */
/*@egen*/options {
              
                
                          
                           
                  
                                           
   OUTPUT_DIRECTORY = "C:/Users/John/Documents/NetBeansProjects/logojavacc/src/com/jgrindall/logojavacc";
   STATIC=false;
                                      
                     

}

PARSER_BEGIN(LogoParser)
package com.jgrindall.logojavacc;
public class LogoParser/*@bgen(jjtree)*/implements LogoParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTLogoParserState jjtree = new JJTLogoParserState();

/*@egen*/
    
}
PARSER_END(LogoParser)

SKIP : 	{ " " }
SKIP : 	{ "\t" }
SKIP : 	{ "\n" | "\r" | "\r\n" }

TOKEN	:	{ < PROC		:	"proc"                      > }
TOKEN	:	{ < END			:	"end"                       > }
TOKEN 	: 	{ < MAKE 		: 	"make"                      > }
TOKEN	:	{ < VARNAME		:	<COLON><ID>                 > }
TOKEN	:  	{ < RPT			:	"rpt"                       > }
TOKEN	:  	{ < RT			:	"rt"                        > }
TOKEN	:	{ < FD			:	"fd"                        > }
TOKEN	:	{ < ID          :	(<ALPHA>)+                  > }

TOKEN   :       { < DECPOINT            :   "."                             > }
TOKEN   :       { < PLUS                :   "+"                             > }
TOKEN   :       { < MINUS               :   "-"                             > }
TOKEN   :       { < TIMES               :   "*"                             > }
TOKEN   :       { < DIVIDE              :   "/"                             > }
TOKEN   :       { < COLON               :   ":"                             > }
TOKEN   :       { < COMMA               :   ","                             > }


TOKEN   :       { < LBRACKET      	:   "("                                 > }
TOKEN   :       { < RBRACKET      	:   ")"                                 > }
TOKEN   :       { < LSQR        	:   "["                                 > }
TOKEN   :       { < RSQR        	:   "]"                                 > }

TOKEN   :       { < NUMBER      	:   (<DECPOINT>(<DIGIT>)+)    |    ((<DIGIT>)+(<DECPOINT>(<DIGIT>)+)?)     > }
TOKEN   :       { < DIGIT       	:   "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"   > }
TOKEN	:		{ < ALPHA			:	(["a"-"z"] | ["A"-"Z"])            > }


ProgramNode start()              : {/*@bgen(jjtree) ProgramNode */
                                    ProgramNode jjtn000 = new ProgramNode(JJTPROGRAMNODE);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
                                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/double ans=0.0;}
{/*@bgen(jjtree) ProgramNode */
    try {
/*@egen*/
    statement_list()
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
       
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void expression()                : {/*@bgen(jjtree) ExpressionNode */
  ExpressionNode jjtn000 = new ExpressionNode(JJTEXPRESSIONNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExpressionNode */
    try {
/*@egen*/
    multiplicativeExpression() ( plusexpression()   |   minusexpression()  )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void plusexpression()                      :{/*@bgen(jjtree) #PlusExpressionNode( 2) */
  PlusExpressionNode jjtn000 = new PlusExpressionNode(JJTPLUSEXPRESSIONNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #PlusExpressionNode( 2) */
    try {
/*@egen*/
    <PLUS>multiplicativeExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void minusexpression()                       :{/*@bgen(jjtree) #MinusExpressionNode( 2) */
  MinusExpressionNode jjtn000 = new MinusExpressionNode(JJTMINUSEXPRESSIONNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #MinusExpressionNode( 2) */
    try {
/*@egen*/
    <MINUS>multiplicativeExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void multiplicativeExpression(): {}
{
    unaryExpression() (    timesterm()    |    divterm()      )*
}
void timesterm()                       :{/*@bgen(jjtree) #TimesExpressionNode( 2) */
  TimesExpressionNode jjtn000 = new TimesExpressionNode(JJTTIMESEXPRESSIONNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #TimesExpressionNode( 2) */
    try {
/*@egen*/
    (<TIMES> unaryExpression()  )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void divterm()                        :{/*@bgen(jjtree) #DivideExpressionNode( 2) */
  DivideExpressionNode jjtn000 = new DivideExpressionNode(JJTDIVIDEEXPRESSIONNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #DivideExpressionNode( 2) */
    try {
/*@egen*/
    (<DIVIDE> unaryExpression() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void unaryExpression(): {}
{
        <MINUS>/*@bgen(jjtree) NegateExpressionNode */
                {
                  NegateExpressionNode jjtn001 = new NegateExpressionNode(JJTNEGATEEXPRESSIONNODE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ numberExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                     
        |
	numberExpression()
}
void numberExpression():{}
{
    varname()
    |
    number()
    |
    <LBRACKET> expression() <RBRACKET>
}
void varname()                   : {/*@bgen(jjtree) VariableValueNode */
                                    VariableValueNode jjtn000 = new VariableValueNode(JJTVARIABLEVALUENODE);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
                                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}{/*@bgen(jjtree) VariableValueNode */
    try {
/*@egen*/
    t = <VARNAME>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
        {
            jjtn000.addToData("name",t.image);
        }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void number()            : {/*@bgen(jjtree) NumberNode */
                            NumberNode jjtn000 = new NumberNode(JJTNUMBERNODE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t; Double d;}
{/*@bgen(jjtree) NumberNode */
    try {
/*@egen*/
    t=<NUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
        {
            d = Double.parseDouble(t.image);
            jjtn000.addToData("value",new Double(d));
        }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void fndefine_statement()              : {/*@bgen(jjtree) FnDefineNode */
  FnDefineNode jjtn000 = new FnDefineNode(JJTFNDEFINENODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FnDefineNode */
    try {
/*@egen*/
    <PROC>
   (fn_name()   <LBRACKET> ( var_list()  )? <RBRACKET> )
   inside_fn_statement_list()
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void var_list()            :{/*@bgen(jjtree) VarListNode */
  VarListNode jjtn000 = new VarListNode(JJTVARLISTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VarListNode */
   try {
/*@egen*/
   varname() (<COMMA> varname() )*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}
void statement_list()                  :{/*@bgen(jjtree) StatementListNode */
  StatementListNode jjtn000 = new StatementListNode(JJTSTATEMENTLISTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StatementListNode */
    try {
/*@egen*/
    ( statement() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void inside_fn_statement_list()                    :{/*@bgen(jjtree) FnStatementListNode */
  FnStatementListNode jjtn000 = new FnStatementListNode(JJTFNSTATEMENTLISTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FnStatementListNode */
      try {
/*@egen*/
      (  inside_fn_statement()  )*/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
          jjtn000.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/
}
void inside_fn_statement():{}
{
   fncall_statement() | make_statement() | fd_statement() |  rt_statement() | rpt_statement()
}

void statement():{}
{
   inside_fn_statement() | fndefine_statement()
}

void rpt_statement()                 :{/*@bgen(jjtree) RptStatementNode */
  RptStatementNode jjtn000 = new RptStatementNode(JJTRPTSTATEMENTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RptStatementNode */
    try {
/*@egen*/
    <RPT> expression() <LSQR> inside_fn_statement_list() <RSQR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void fncall_statement()           :{/*@bgen(jjtree) FnCallNode */
  FnCallNode jjtn000 = new FnCallNode(JJTFNCALLNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FnCallNode */
      try {
/*@egen*/
	
      fn_name()<LBRACKET> (  expression_list()   )?  <RBRACKET>/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
          jjtn000.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/ 
}
void expression_list()                   :{/*@bgen(jjtree) ExpressionListNode */
  ExpressionListNode jjtn000 = new ExpressionListNode(JJTEXPRESSIONLISTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExpressionListNode */
    try {
/*@egen*/
    expression() (<COMMA>  expression()  )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}
void fn_name()           :{/*@bgen(jjtree) FnNameNode */
                           FnNameNode jjtn000 = new FnNameNode(JJTFNNAMENODE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) FnNameNode */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {jjtn000.addToData("name",t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void fd_statement()                :{/*@bgen(jjtree) FdStatementNode */
  FdStatementNode jjtn000 = new FdStatementNode(JJTFDSTATEMENTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FdStatementNode */
    try {
/*@egen*/
    <FD>expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void rt_statement()                :{/*@bgen(jjtree) RtStatementNode */
  RtStatementNode jjtn000 = new RtStatementNode(JJTRTSTATEMENTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RtStatementNode */
    try {
/*@egen*/
    <RT>expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void make_statement()                  :{/*@bgen(jjtree) MakeStatementNode */
  MakeStatementNode jjtn000 = new MakeStatementNode(JJTMAKESTATEMENTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MakeStatementNode */
    try {
/*@egen*/
    <MAKE>
    vardefn()
    expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void vardefn()                  : {/*@bgen(jjtree) VariableDefnNode */
                                   VariableDefnNode jjtn000 = new VariableDefnNode(JJTVARIABLEDEFNNODE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
                                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}{/*@bgen(jjtree) VariableDefnNode */
    try {
/*@egen*/
    t = <VARNAME>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
        {   
            jjtn000.addToData("name",t.image);
        }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}